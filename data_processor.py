
from music21 import converter, instrument, note, chord, stream
import numpy
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint

from os import listdir
from os.path import isfile, join

sequence_length = 40 #100
DEBUG = False

def get_note_encodings(path):
    notes, maxNotes, minNotes, meanNotes = get_notes(path)

    distinct_notes = len(set(notes))

    note_values = sorted(set(item for item in notes))

    encodingDict = dict((note, number) for number, note in enumerate(note_values))
    decodingDict = {v: k for k, v in encodingDict.items()}
    
    if DEBUG: print ("There are " + str(distinct_notes) + " distinct notes in the training dataset, with dictionary mappings: ")
    if DEBUG: print (encodingDict)

    return (distinct_notes, encodingDict, decodingDict)

def process_data(path, distinct_notes, encodingDict):
    notes, maxNotes, minNotes, meanNotes = get_notes(path)
    
    if DEBUG: print("\nRESULTS:\nThere are an average of " + str(meanNotes) + " notes per song. The min number of notes is " + str(minNotes) + " and the max is " + str(maxNotes) + ".")
    if DEBUG: print("Setting sequence length to " + str(sequence_length))

    training_Xs = []
    training_Ys = []

    for i in range(len(notes) - sequence_length):
        sequence_xs = notes[i: i + sequence_length] #note 0 to 39 of first song = input
        sequence_y = notes[i + sequence_length] #note 40 = output 
        training_Xs.append([encodingDict[char] for char in sequence_xs])
        training_Ys.append(encodingDict[sequence_y])

    num_patterns = len(training_Xs)
    if DEBUG: print("Using sequence length of " + str(sequence_length) + ", " + str(num_patterns) + " input-output pairs were generated.")
    # reshape the input into a format compatible with LSTM layers
    training_Xs = numpy.reshape(training_Xs, (num_patterns, sequence_length, 1))
    # if DEBUG: print("Example training sample before normalization: \ninput: \n" + str(training_Xs[0]) + "\noutput:\n " + str(training_Ys[0]))
    
    # normalize input
    training_Xs = training_Xs / float(distinct_notes)
    training_Ys = np_utils.to_categorical(training_Ys, num_classes = distinct_notes)
    # if DEBUG: print("Example training sample after normalization: \ninput: \n" + str(training_Xs[0]) + "\noutput:\n " + str(training_Ys[0]))

    return (training_Xs, training_Ys)


def get_notes(path): #this function was written by Sigurður Skúli
    files = [join(path, f) for f in listdir(path) if isfile(join(path, f))]

    """ Get all the notes and chords from the midi files in the ./midi_songs directory """
    notes = []
    notes_per_song = []

    for file in files:
        midi = converter.parse(file)

        # if DEBUG: print("Parsing %s" % file)

        notes_to_parse = None

        try: # file has instrument parts
            s2 = instrument.partitionByInstrument(midi)
            notes_to_parse = s2.parts[0].recurse() 
        except: # file has notes in a flat structure
            notes_to_parse = midi.flat.notes

        notes_per_song.append(len(notes_to_parse))

        for element in notes_to_parse:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))
        
    
    return (notes, max(notes_per_song), min(notes_per_song), int(numpy.mean(notes_per_song)))


def one_hot_to_int(vector):
    return int(numpy.where(vector==1)[0])


def vector_to_MIDI(vector, decodingDict):
    midi_notes = [decodingDict[val] for val in vector]
    create_midi(midi_notes)

def create_midi(prediction_output): #this function was written by Sigurður Skúli
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.5

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output.midi')

